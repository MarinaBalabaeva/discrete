using System;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics;

namespace Permutations512
{
    class Program
    {
        /// <summary>
        /// Кол-во различных слов, которые можно получить перестановкой букв слова a, подходящих под условие
        /// </summary>
        private static int Count = 0;


        private static readonly string vowels = "аеёиоуыэюя";
        private static readonly string consonants = "бвгджзйклмнпрстфхцчшщьъ";

        static void Main(string[] args)
        {
            string word = "интернирование";
            int len = word.Length;

            var group = word.GroupBy(g => g);

            char[] letters = new char[group.Count()]; // Все буквы в определённом порядке
            int[] countLetters = new int[group.Count()]; // Кол-во букв letters[i] в слове

            List<char> vowelArray = new List<char>();
            List<char> consonantArray = new List<char>();
            foreach (char c in word)
            {
                if (vowels.Contains(c))
                {
                    vowelArray.Add(c);
                }
                else if (consonants.Contains(c))
                {
                    consonantArray.Add(c);
                }
            }
            vowelArray.Sort();

            for (int i = 0; i < group.Count(); i++)
            {
                letters[i] = group.ElementAt(i).Key;
                countLetters[i] = group.ElementAt(i).Count();
            }

            Stopwatch stopWatch = new Stopwatch();
            TimeSpan ts;

            stopWatch.Start();
            GetCountPermutations("",  letters, countLetters, vowelArray, consonantArray);
            Console.WriteLine($"Кол-во перестановок, подходящих под условие = {Count}");
            stopWatch.Stop();
            ts = stopWatch.Elapsed;
            Console.WriteLine("Время выполнения = {0:00}:{1:00}.{2:00}", ts.Minutes, ts.Seconds, ts.Milliseconds / 10);

            Console.ReadLine();
        }

        /// <summary>
        /// Тут без полного понимания лучше ничего не трогать
        /// </summary>
        static void GetCountPermutations(string per, char[] letters, int[] countLetters, List<char> vow, List<char> cons)
        {
            if (per.Length == vow.Count + cons.Count)
            {
                if (Test(per, vow, cons))
                {
                    Count++;
                    //Console.WriteLine(per); // Для вывода перестановки на консоль (Сильно влияет на быстродействие)
                }

                return;
            }

            for (int i = 0; i < countLetters.Length; i++)
            {
                if (countLetters[i] > 0)
                {
                    countLetters[i]--;
                    GetCountPermutations(per + letters[i], letters, countLetters, vow, cons);
                    countLetters[i]++;
                }
            }
        }

        /// <summary>
        /// Здесь меняем на своё
        /// Метод принимает строку и проверяет её на выполнение условия
        /// </summary>
        /// <param name="s">Строка для проверки</param>
        /// <returns>true или false</returns>
        static bool Test(string s, List<char> vow, List<char> cons)
        {
            int vStartIndex;
            int cStartIndex;
            if (vowels.Contains(s[0]))
            {
                vStartIndex = 0;
                cStartIndex = 1;
            }
            else if (consonants.Contains(s[0]))
            {
                cStartIndex = 0;
                vStartIndex = 1;
            }
            else
            {
                return false; //на общий случай, если вдруг встретилось что-то непонятное
            }
            LinkedList<char> vowTest = new LinkedList<char>(vow);
            LinkedList<char> consTest = new LinkedList<char>(cons);
            for (int i = vStartIndex; i < s.Length; i += 2)
            {
                char getChar = s[i];
                if (vowTest.First != null && vowTest.First.Value == getChar)
                {
                    vowTest.RemoveFirst();
                }
                else
                {
                    return false;
                }
            }
            for (int i = cStartIndex; i < s.Length; i += 2)
            {
                char getChar = s[i];
                if (consTest.Contains(getChar))
                {
                    consTest.Remove(getChar);
                }
                else
                {
                    return false;
                }
            }
            return (vowTest.Count == 0 && consTest.Count == 0);
        }
    }
}
